% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_distances.R
\name{GetConnectivities}
\alias{GetConnectivities}
\title{Derive connectivities from distances}
\usage{
GetConnectivities(
  object,
  neighbors.use,
  method = c("umap", "gauss"),
  graph.name = NULL,
  assay = NULL,
  umap.set.op.mix.ratio = 1,
  umap.local.connectivity = 1,
  umap.niter.smoothing = 64L,
  umap.apply.set.operations = TRUE,
  umap.bipartite = FALSE,
  gauss.sigmas = NULL,
  gauss.median.sigma = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{object}{a \code{Seurat} object}

\item{neighbors.use}{name of a \code{Neighbor} instance stored in the
\code{Seurat object} to derive connectivities from.}

\item{graph.name}{name of the return \code{Graph} of connectivities to store
in the \code{Seurat object}.}

\item{assay}{name of the assay to reference in the output \code{Graph} object.
Use the default assay of \code{object} if not provided.}

\item{umap.set.op.mix.ratio}{float between 0 and 1. Controls how the fuzzy
sets are mixed to obtain a global fuzzy simplicial set. 0 and 1 correspond to
a pure fuzzy intersection and union, respectively. Both fuzzy set operations
use the product t-norm. Only applies to the \strong{umap} method.}

\item{umap.local.connectivity}{The local connectivity required, i.e. the
expected number of nearest neighbours locally connected. The higher, the more
local connections are output. In practice, this should be not more than the
local intrinsic dimension of the manifold. Only applies to the \strong{umap}
method when \code{umap.apply.set.operations = TRUE}.}

\item{umap.niter.smoothing}{maximum number of iterations during the smoothing
process of distances. Only applies to the \strong{umap} method.}

\item{umap.apply.set.operations}{set to \code{FALSE} to disable the fuzzy
union or intersection of the local fuzzy simplicial sets into a global fuzzy
simplicial set. Only applies to the \strong{umap}
method.}

\item{umap.bipartite}{whether the knn network is bipartite (\code{FALSE} by
default). Only applies to the \strong{umap} method.}

\item{gauss.sigmas}{by default, a sigma value (i.e. width of the kernel) per
cell is computed internally. Those sigmas are controlling for each cell's
connectivities range and magnitude. Alternatively, you can provide your own
width(s). If the length of \code{sigmas} is shorter than the number of cells,
it will be recycled. Only applies to the \strong{Gaussian} method.}

\item{gauss.median.sigma}{which estimation method to use when
\code{sigmas = NULL}. By default, use the cell’s distance to its kth nearest
neighbour. When \code{median.sigma = TRUE}, use the median of distances to
the nearest neighbours (excluding self). Only applies to the
\strong{Gaussian} method.}

\item{verbose}{whether to print progress messages}
}
\value{
the Seurat object with a new \code{Graph} instance of name
\code{graph.name}
}
\description{
Adapted from \pkg{scanpy}'s strategy in \code{sc.pp.neighbors()} to compute
connectivities. Two methods are available, using a Gaussian kernel or a fuzzy
union of simplical sets as implemented in \pkg{umap-learn}
}
\note{
The UMAP method is a re-implementation of the function
\code{fuzzy_simplicial_set()} from \pkg{umap-learn} and should estimate
identical connectivities. You can check the
\href{https://umap-learn.readthedocs.io/en/latest/api.html#umap.umap_.fuzzy_simplicial_set}{original documentation}.\cr\cr
The Gaussian kernel method is a re-implementation of the analogous function
from \pkg{scanpy} called by \code{\code{sc.pp.neighbors()}}. You can have a
look at the
\href{https://github.com/scverse/scanpy/blob/b918a23eb77462837df90d7b3a30a573989d4d48/src/scanpy/neighbors/_connectivity.py#L18}{original function}\cr
\code{median.sigmas = FALSE} is the method used in Haghverdi L. et al.,2016.
}
\references{
McInnes, L., Healy, J. & Melville, J. UMAP: Uniform Manifold
Approximation and Projection for Dimension Reduction. arXiv preprint (2018).
\href{https://doi.org/10.48550/ARXIV.1802.03426}{DOI}

Wolf, F. A., Angerer, P. & Theis, F. J. SCANPY: large-scale
single-cell gene expression data analysis. Genome Biology 19, (2018).

Coifman, R. R., Lafon, S., Lee, A. B., Maggioni, M., Nadler, B.,
Warner, F. & Zucker, S. W. Geometric diffusions as a tool for harmonic
analysis and structure definition of data: Diffusion maps. PNAS 102, 7426–7431
(2005). \href{https://doi.org/10.1073/pnas.0500334102}{DOI}

Haghverdi, L., Büttner, M., Wolf, F. A., Buettner, F. & Theis, F.
J. Diffusion pseudotime robustly reconstructs lineage branching. Nature
Methods 13, 845–848 (2016). \href{https://doi.org/10.1038/nmeth.3971}{DOI}
}
