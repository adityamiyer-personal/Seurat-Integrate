% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scVI.R
\name{scVIIntegration}
\alias{scVIIntegration}
\alias{scVIIntegration.fix}
\title{Run scVI on Seurat's \link[SeuratObject]{Assay5} object through \code{\link[Seurat]{IntegrateLayers}}}
\usage{
scVIIntegration(
  object,
  groups = NULL,
  groups.name = NULL,
  labels.name = NULL,
  features = NULL,
  layers = "counts",
  scale.layer = "scale.data",
  conda_env = NULL,
  new.reduction = "integrated.scVI",
  reduction.key = "scVIlatent_",
  ncores = NULL,
  model.save.dir = NULL,
  ndims.out = 10,
  n_hidden = 128L,
  n_layers = 1L,
  dropout_rate = 0.1,
  dispersion = c("gene", "gene-batch", "gene-label", "gene-cell"),
  gene_likelihood = c("zinb", "nb", "poisson"),
  latent_distribution = c("normal", "ln"),
  max_epochs = NULL,
  train_size = 0.9,
  batch_size = 128L,
  seed.use = 42L,
  verbose = TRUE,
  verbose.scvi = c("INFO", "NOTSET", "DEBUG", "WARNING", "ERROR", "CRITICAL"),
  ...
)

scVIIntegration.fix(...)
}
\arguments{
\item{object}{A \code{\link[SeuratObject]{Seurat}} object
(or an \code{\link[SeuratObject]{Assay5}} object if
not called by \code{\link[Seurat]{IntegrateLayers}})}

\item{groups}{A \bold{named} data frame with grouping information.}

\item{groups.name}{Column name from \code{groups} data frame that stores
grouping information. If \code{groups.name = NULL}, the first column is used}

\item{labels.name}{Column name from \code{groups} data frame that stores
cell label information. If \code{labels.name = NULL}, all cells are assigned
the same label.}

\item{features}{Vector of feature names to input to the integration method.
When \code{features = NULL} (default), the
\code{\link[SeuratObject]{VariableFeatures}} are used. To pass all features,
use the output of \code{\link[SeuratObject]{Features}()}}

\item{layers}{Name of the layers to use in the integration.
\bold{'counts'} is highly recommended}

\item{conda_env}{Path to conda environment to run scVI (should also
contain the scipy python module)}

\item{new.reduction}{Name of the new integrated dimensional reduction}

\item{reduction.key}{Key for the new integrated dimensional reduction}

\item{ncores}{Number of parallel threads PyTorch is allowed to use}

\item{model.save.dir}{Path to a directory to save the model to. Uses
\code{SCVI.save()}. Does not save anndata. Note that neither the trainer
optimizer state nor the trainer history are saved.
\code{model.save.dir = NULL} (default) disables saving the model.}

\item{ndims.out}{Number of dimensions for \code{new.reduction} output.
Corresponds to \code{n_latent} argument in the original API of SCVI}

\item{n_hidden}{Number of nodes per hidden layer.}

\item{n_layers}{Number of hidden layers used for encoder and decoder NNs.}

\item{dropout_rate}{Dropout rate for neural networks.}

\item{dispersion}{One of the following:
\itemize{
 \item{\code{gene}:} {dispersion parameter of NB is constant per gene across cells (default)}
 \item{\code{gene-batch}:} {dispersion can differ between different batches}
 \item{\code{gene-label}:} {dispersion can differ between different labels}
 \item{\code{gene-cell}:} {dispersion can differ for every gene in every cell}
}}

\item{gene_likelihood}{One of the following:
\itemize{
 \item{\code{zinb}:} {Zero-inflated negative binomial distribution (default)}
 \item{\code{nb}:} {Negative binomial distribution}
 \item{\code{poisson}:} {Poisson distribution}
}}

\item{latent_distribution}{One of the following:
\itemize{
 \item{\code{normal}:} {Normal distribution (default)}
 \item{\code{ln}:} {Logistic normal distribution (Normal(0, I) transformed by softmax)}
}}

\item{max_epochs}{Number of passes through the dataset for semisupervised training.}

\item{train_size}{Size of training set in the range \code{[0.0, 1.0]}}

\item{batch_size}{Minibatch size to use during training.}

\item{seed.use}{An integer to generate reproducible outputs.
Set \code{seed.use = NULL} to disable}

\item{verbose}{Print messages. Set to \code{FALSE} to disable}

\item{verbose.scvi}{Verbosity level of scVI. From quietest to talkiest:
CRITICAL, ERROR, WARNING, INFO (default), DEBUG, NOTSET}

\item{...}{For \code{scVIIntegration()}, additional arguments to be passed to
\code{scvi.model.SCVI}, \code{SCVI.setup_anndata} or \code{SCVI.train} (see
\strong{Details} section). For \code{scVIIntegration.fix()}, all of the above}
}
\value{
A list containing:
\itemize{
  \item a new DimReduc of name \code{new.reduction} (key set to
  \code{reduction.key}) consisting of the latent space of the model with
  \code{ndims.out} dimensions.
}
When called via \code{\link[Seurat]{IntegrateLayers}}, a Seurat object with
the new reduction and/or assay is returned
}
\description{
A wrapper to run \code{scVI} on multi-layered Seurat V5 object.
Requires a conda environment with \code{scvi-tools} and necessary dependencies

Can be called via \code{SeuratIntegrate::scVIIntegration()} or
\code{scVIIntegration.fix()}

\strong{Recommendations}: use raw counts and all features
(\code{features = Features(object), layers = "counts"})
}
\details{
This wrappers calls three python functions through \pkg{reticulate}.
Find the \pkg{scVI}-specific arguments there:
\itemize{
  \item{model initiation:} {
  \href{https://docs.scvi-tools.org/en/stable/api/reference/scvi.model.SCVI.html#scvi.model.SCVI}{scvi.model.SCVI}, which relies on
  \href{https://docs.scvi-tools.org/en/stable/api/reference/scvi.module.VAE.html#scvi.module.VAE}{scvi.module.VAE}}
  \item{anndata setup:} {
  \href{https://docs.scvi-tools.org/en/stable/api/reference/scvi.model.SCVI.html#scvi.model.SCVI.setup_anndata}{SCVI.setup_anndata}}
  \item{training:} {
  \href{https://docs.scvi-tools.org/en/stable/api/reference/scvi.model.SCVI.html#scvi.model.SCVI.train}{SCVI.train}}
}
}
\note{
This function requires the
\href{https://scvi-tools.org/}{\pkg{scvi-tools}} package
to be installed (along with \pkg{scipy})
}
\examples{
\dontrun{
# Preprocessing
obj <- SeuratData::LoadData("pbmcsca")
obj[["RNA"]] <- split(obj[["RNA"]], f = obj$Method)
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj)
obj <- ScaleData(obj)
obj <- RunPCA(obj)

# After preprocessing, we integrate layers:
obj <- IntegrateLayers(object = obj, method = scVIIntegration,
                       features = Features(obj), conda_env = 'scvi-tools',
                       layers = 'counts', groups = obj[[]], groups.name = 'Method')

# To enable cell label-guided correction, save the model, add other 'nuisance' factors and increase number of threads used:
obj <- IntegrateLayers(object = obj, method = scVIIntegration,
                       features = Features(obj), conda_env = 'scvi-tools',
                       layers = 'counts', groups = obj[[]], groups.name = "Method",
                       labels.name = "CellType",
                       categorical_covariate_keys = list("Experiment"),
                       continuous_covariate_keys = list("percent.mito"),
                       ncores = 8, model.save.dir = '~/Documents/scVI.model')
}

}
\references{
Lopez, R., Regier, J., Cole, M. B., Jordan, M. I. & Yosef, N.
Deep generative modeling for single-cell transcriptomics. Nat Methods 15,
1053â€“1058 (2018). \href{https://doi.org/10.1038/s41592-018-0229-2}{DOI}
}
\seealso{
\code{\link[Seurat]{IntegrateLayers}}, \code{\link[Seurat]{writing-integration}}
}
