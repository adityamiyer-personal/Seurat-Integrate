% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Combat.R
\name{CombatIntegration}
\alias{CombatIntegration}
\title{Run ComBat on Seurat's \link[SeuratObject]{Assay5} object through \code{\link[Seurat]{IntegrateLayers}}}
\usage{
CombatIntegration(
  object,
  orig = NULL,
  groups = NULL,
  groups.name = NULL,
  layers = "data",
  scale.layer = "scale.data",
  features = NULL,
  reconstructed.assay = "combat.reconstructed",
  key.assay = "combat_",
  combat.function = c("combat", "combat_seq"),
  use.scaled = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{A \code{\link[SeuratObject]{Seurat}} object
(or an \code{\link[SeuratObject]{Assay5}} object if
not called by \code{\link[Seurat]{IntegrateLayers}})}

\item{orig}{\code{\link[SeuratObject]{DimReduc}} object. Not to be set
directly when called with \code{\link[Seurat]{IntegrateLayers}}, use
\code{orig.reduction} argument instead}

\item{groups}{A \bold{named} data frame with grouping information. Preferably
one-column when \code{groups.name = NULL}}

\item{groups.name}{Column name from \code{groups} data frame that stores
grouping information. If \code{groups.name = NULL}, the first column is used}

\item{layers}{Name of the layers to use in the integration}

\item{features}{Vector of feature names to input to the integration method.
When \code{features = NULL} (default), the
\code{\link[SeuratObject]{VariableFeatures}} are used. To pass all features,
use the output of \code{\link[SeuratObject]{Features}()}}

\item{reconstructed.assay}{Name for the \code{assay} containing the corrected
expression matrix}

\item{key.assay}{Optional key for the new combat assay. Format: "[:alnum:]*_"}

\item{combat.function}{ComBat implementation to use. One of
\link[sva:ComBat]{combat}, \link[sva:ComBat_seq]{combat_seq}. Note that
ComBat_seq is an improved model from ComBat but requires a dense matrix.
Sparse to dense matrix conversion can be memory-intensive.}

\item{use.scaled}{By default the layer passed to the \code{layer} argument is
used. When \code{use.scaled = TRUE}, the \code{scale.layer} is input to ComBat.}

\item{verbose}{Print messages. Set to \code{FALSE} to disable}

\item{...}{Additional arguments passed on to \link[sva:ComBat]{ComBat} or
\link[sva:ComBat_seq]{ComBat_seq}.}
}
\value{
The function itself returns a list containing:
\itemize{
  \item a new Assay of name \code{reconstructed.assay} (key set to
  \code{assay.key}) with corrected cell counts.
}
When called via \code{\link[Seurat]{IntegrateLayers}}, a Seurat object with
the new assay is returned
}
\description{
A wrapper to run \code{\link[sva:ComBat]{ComBat}} or
\code{\link[sva:ComBat_seq]{ComBat_seq}} on multi-layered Seurat V5 object
}
\note{
This function requires the
\href{https://bioconductor.org/packages/release/bioc/html/sva.html}{\pkg{sva}
(Surrogate Variable Analysis)} package to be installed
}
\examples{
\dontrun{
# Preprocessing
obj <- UpdateSeuratObject(SeuratData::LoadData("pbmcsca"))
obj[["RNA"]] <- split(obj[["RNA"]], f = obj$Method)
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj)
obj <- ScaleData(obj)
obj <- RunPCA(obj)

# After preprocessing, we integrate layers based on the "Method" variable:
obj <- IntegrateLayers(object = obj, method = CombatIntegration,
                       verbose = TRUE, layers = "data", scale.layer = NULL,
                       features = VariableFeatures(
                         FindVariableFeatures(obj, nfeatures = 5e3)
                       ))

# We can also change parameters such as the input data.
# Here we use the scale data, the ComBat implementation and we use the cell
# labels as a "biological condition of interest" (/!\ long):

obj <- IntegrateLayers(object = obj,  method = CombatIntegration,
                       verbose = TRUE, features = VariableFeatures(obj),
                       use.scaled = FALSE, combat.function = 'combat_seq',
                       group = obj[[]]$CellType, groups = obj[[]],
                       groups.name = "Method", layers = "counts")
}
}
\references{
Johnson, W. E., Li, C. & Rabinovic, A. Adjusting batch effects in
microarray expression data using empirical Bayes methods. Biostatistics 8,
118â€“127 (2006). \href{https://doi.org/10.1093/biostatistics/kxj037}{DOI}

Zhang, Y., Parmigiani, G. & Johnson, W. E. ComBat-seq: batch effect
adjustment for RNA-seq count data. NAR Genomics and Bioinformatics 2 (2020).
\href{https://doi.org/10.1093/nargab/lqaa078}{DOI}
}
